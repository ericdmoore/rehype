/**
 * Assert that `node` is a valid hast node.
 * If `node` is a parent, all children will be asserted too.
 *
 * @param {unknown} [node]
 * @param {Parent} [parent]
 * @returns {asserts node is Node}
 */
export function assert(
  node?: unknown,
  parent?: Parent
): asserts node is import('unist').Node
/**
 * Assert that `node` is a valid hast parent.
 *
 * @param {unknown} [node]
 * @param {Parent} [parent]
 * @returns {asserts node is Parent}
 */
export function parent(
  node?: unknown,
  parent?: Parent
): asserts node is import('hast').Parent
/**
 * Assert that `node` is a valid hast literal.
 *
 * @param {unknown} [node]
 * @param {Parent} [parent]
 * @returns {asserts node is Literal}
 */
export function literal(
  node?: unknown,
  parent?: Parent
): asserts node is import('hast').Literal
export type Node = import('hast').Node
export type Parent = import('hast').Parent
export type Literal = import('hast').Literal
export type Root = import('hast').Root
export type Element = import('hast').Element
export type Doctype = import('hast').DocType
import {_void} from 'unist-util-assert'
import {wrap} from 'unist-util-assert'
export {_void, wrap}
